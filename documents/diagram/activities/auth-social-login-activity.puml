@startuml Auth Social Login Activity Diagram
!theme plain

skinparam ConditionStyle diamond

title Social Login Activity (Google / GitHub)
caption Steps for authenticating via a third-party provider

|User|
start

|Frontend (fe)|
:Display Login Options;

|User|
:Select Login Method (Google / GitHub);
:Click Google/GitHub Button;

|Frontend (fe)|
:Call next-auth signIn(provider);
note right: next-auth handles OAuth flow with provider

|Nextjs Server|
:Receive Callback from Provider;
:Extract idToken/accessToken;
:Call Backend API Endpoint;

|Backend API|
:Receive POST /auth/login/google or /github;
:Call AuthService.validateLoginGoogle/Github;
|External Provider|
:Verify Token with Provider (Google Client/Octokit);
|Backend API|
if (Verification Failed?) then (yes)
    :Throw UnauthorizedException;
    :Return 4xx Error;
    |Frontend (fe)|
    :Show Login Failed Message;
    stop
else (no)
    |Backend API|
    :Extract User Info (Email, Name, Avatar);
    :Find or Create User by Email (via DB);
    if (User Blocked?) then (yes)
        :Throw UnprocessableEntityException;
        note left: Assumed check, service likely calls\nshared validation logic or decorator
        :Return 422 Error;
        |Frontend (fe)|
        :Show Blocked Message;
        stop
    else (no)
        |Backend API|
        if (Email Not Verified?) then (yes)
        :Update User: emailVerified = true (via DB);
        endif
        :Generate Access & Refresh Tokens (JwtService);
        :Return Tokens & User Data (from Service);
        :Return 200 OK with LoginResponseDto (from Controller);
        |Frontend (fe)|
        :Receive Tokens & User Data;
        :next-auth stores session (JWT Cookie);
        :Redirect to Target Page;
        -> Logged In;
    endif
endif

#lightgreen:Logged In;
|Frontend (fe)|
:User is Authenticated;

stop
@enduml
